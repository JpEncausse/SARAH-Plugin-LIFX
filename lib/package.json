{
  "name": "lifx",
  "version": "0.1.3",
  "author": {
    "name": "Kevin Bowman",
    "email": "npm@magicmonkey.org"
  },
  "description": "a library to control LIFX wifi lightbulbs",
  "main": "./lifx.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/magicmonkey/lifxjs.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/magicmonkey/lifxjs/raw/master/LICENSE"
    }
  ],
  "bugs": {
    "url": "https://github.com/magicmonkey/lifxjs/issues"
  },
  "keywords": [
    "lifx",
    "led",
    "wifi",
    "bulb",
    "lightbulb"
  ],
  "dependencies": {
    "clone": "*"
  },
  "readme": "# JS library for LIFX bulbs\n\nA NodeJS client for the [LIFX bulbs](http://lifx.co) based on my observations\nof the network protocol using tcpdump and Wireshark.  This is very much\nexperimental, so is most likely incorrect or inaccurate, although it seems to\nwork for me.  You have been warned.  Observations are documented in\n[Protocol.md](Protocol.md).\n\nThis is based on my setup of 2 bulbs in a single group.  That may or may not\naffect the network protocol.  Also, I've not looked at how the bulbs are\ninitially setup to hop onto your wireless network; I configured mine with the\niPhone app, and this library is (currently) for manipulating the bulbs once\nthey are already attached to your network.\n\n_Bonus: There's a demo web app in the \"web\" dir which just displays a colour\n        picker and sets the bulbs to the chosen colour, and a demo mqtt bridge\n        in the \"mqtt\" dir which bridges between an MQTT broker and the bulbs_\n\n## Install\n\nTo install from NPM, do ```npm install lifx```, or just clone the github repo\n(but you'll need to run ```npm install``` in this dir to get the \"clone\"\ndependency if you get from github).\n\nIf you install form NPM, then do ```require(\"lifx\");```.  If you cloned the\ngithub repo then you'll need to do something like ```require(\"./lifx\");``` (ie\nspecify the path to the dir you cloned into).\n\nIf you want to run the web or mqtt app, you also need to run ```npm install```\nin the respective dir to get their dependencies.\n\n## Files\n\nThere is 1 main file (lifx.js) which is all you need plus some example CLI\napps:\n\n  * cli.js which is an example CLI app using the library\n  * cli2.js which lets you cycle through individual parameters to get a feel\n    for what they mean\n  * cli3.js controls individual bulbs\n\nMy observations of the network protocol are documented in [this\ndoc](Protocol.md).  Hopefully LIFXLabs will release an official spec for the\nnetwork protocol which will make this a lot easier.\n\n## Usage\n\nThe file [cli.js](cli.js) is a working example.\n\nIn addition to the main \"Lifx\" object which acts as your agent to the Lifx\nbulbs, there are 2 fundamental objects in the library; a \"gateway\" object which\nrepresents the wifi interface (and can do things like discovery of the other\nbulbs, send messages to a bulb etc) and a \"bulb\" object which is useful for\nsending commands to individual bulbs.\n\nTo begin with, you must include the library and then call ```lifx.init()```\nwhich will return a new ```Lifx``` object and initialise discovery of gateways\nand bulbs.\n\n```JavaScript\nvar lifx = require('./lifx');\nvar lx   = lifx.init();\n```\n\nThe Lifx object is an EventEmitter, and emits a \"bulb\" event whenever a new bulb\nis found and a \"gateway\" event whenever a new gateway is found.  Note that\nmultiple bulbs can be acting as gateways on your network, especially if they\nhaven't yet formed their mesh network.\n\nOnce you have the Lifx object, you can use it to send commands to all of the\nbulbs in the mesh network:\n\n```Javascript\nlx.lightsOn();\nlx.lightsOff();\nlx.lightsColour(hue,    saturation, luminance, whiteColour, fadeTime);\nlx.lightsColour(0xd49e, 0xffff,     0x028f,    0x0dac,      0x0513);\n```\n\nor to target an individual bulb, pass an optional parameter:\n\n```Javascript\nvar bulb = lx.bulbs[0];\nlx.lightsOn(bulb);\nlx.lightsOff(bulb);\nlx.lightsColour(hue,    saturation, luminance, whiteColour, fadeTime, bulb);\nlx.lightsColour(0xd49e, 0xffff,     0x028f,    0x0dac,      0x0513,   bulb);\n```\n\nThe params are always 16-bit numbers, which get their bytes shuffled around\nbefore being sent over the network (see the [protocol](Protocol.md) doc for the\nunderlying details).\n\n* hue represents the colour to use, and is manipulated by the colour wheel in\n  the iPhone app.\n* saturation represents how much of the colour to use, and is generally either\n  0xffff (if using the \"Colors\" screen in the iPhone app) or 0x0000 (if using\n  the \"Whites\" screen in the iPhone app).\n* luminance is how bright the bulbs should be.\n* whiteColour is something like the colour temperatue, and is the wheel used in\n  the \"Whites\" screen in the iPhone app.\n* fadeTime says how quickly the bulbs should move to the given state, and seem\n  to roughly be in milliseconds.  Use 0 for an immediate change.\n\nYou can also send a raw command to all bulbs using ```lx.sendToAll(buffer)```\nwhich will get the packet preamble prepended.  Similarly, to send a raw command\nto an individual bulb, use ```lx.sendToOne(buffer, bulb)``` passing in a bulb\nobject from the lx.bulbs array.\n\nIf you want to see debug messages (including network traffic) then call\n\n```JavaScript\nlifx.setDebug(true);\n```\n\n## Wireshark dissector\n\nThere is a wireshark dissector for the LIFX protocol in the \"wireshark\"\ndirectory.  To load it, run Wireshark with:\n\n```\n/path/to/wireshark -X lua_script:/path/to/lifx.lua\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "lifx@0.1.3",
  "dist": {
    "shasum": "2db278024315fe3f703a756b210d88e6df69ccaf"
  },
  "_from": "lifx@",
  "_resolved": "https://registry.npmjs.org/lifx/-/lifx-0.1.3.tgz"
}
